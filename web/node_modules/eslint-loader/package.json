{
  "_args": [
    [
      {
        "raw": "eslint-loader@1.6.0",
        "scope": null,
        "escapedName": "eslint-loader",
        "name": "eslint-loader",
        "rawSpec": "1.6.0",
        "spec": "1.6.0",
        "type": "version"
      },
      "/home/ryu/Projects/sket.io/web/node_modules/react-scripts"
    ]
  ],
  "_from": "eslint-loader@1.6.0",
  "_id": "eslint-loader@1.6.0",
  "_inCache": true,
  "_location": "/eslint-loader",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/eslint-loader-1.6.0.tgz_1476686827720_0.5771443890407681"
  },
  "_npmUser": {
    "name": "moox",
    "email": "m@moox.io"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "eslint-loader@1.6.0",
    "scope": null,
    "escapedName": "eslint-loader",
    "name": "eslint-loader",
    "rawSpec": "1.6.0",
    "spec": "1.6.0",
    "type": "version"
  },
  "_requiredBy": [
    "/react-scripts"
  ],
  "_resolved": "https://registry.npmjs.org/eslint-loader/-/eslint-loader-1.6.0.tgz",
  "_shasum": "38f9a1e6c602a4f1f3f3516289726e5d26e6e165",
  "_shrinkwrap": null,
  "_spec": "eslint-loader@1.6.0",
  "_where": "/home/ryu/Projects/sket.io/web/node_modules/react-scripts",
  "author": {
    "name": "Maxime Thirouin"
  },
  "bugs": {
    "url": "https://github.com/MoOx/eslint-loader/issues"
  },
  "dependencies": {
    "find-cache-dir": "^0.1.1",
    "loader-utils": "^0.2.7",
    "object-assign": "^4.0.1"
  },
  "description": "eslint loader (for webpack)",
  "devDependencies": {
    "eslint": "^3.0.0",
    "eslint-friendly-formatter": "^2.0.4",
    "npmpub": "^3.0.1",
    "tape": "^4.0.0",
    "webpack": "^1.8.4"
  },
  "directories": {},
  "dist": {
    "shasum": "38f9a1e6c602a4f1f3f3516289726e5d26e6e165",
    "tarball": "https://registry.npmjs.org/eslint-loader/-/eslint-loader-1.6.0.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "570730c1c22bde8c1ac846772bd9afe2a8767b65",
  "homepage": "https://github.com/MoOx/eslint-loader#readme",
  "keywords": [
    "lint",
    "linter",
    "eslint",
    "loader",
    "webpack"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "moox",
      "email": "m@moox.io"
    }
  ],
  "name": "eslint-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "eslint": ">=1.6.0 <4.0.0"
  },
  "readme": "# eslint-loader [![Build Status](http://img.shields.io/travis/MoOx/eslint-loader.svg)](https://travis-ci.org/MoOx/eslint-loader)\n\n> eslint loader for webpack\n\n## Install\n\n```console\n$ npm install eslint-loader --save-dev\n```\n\n## Usage\n\nIn your webpack configuration\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ]\n  }\n  // ...\n}\n```\n\nWhen using with transpiling loaders (like `babel-loader`), make sure they are in correct order\n(bottom to top). Otherwise files will be check after being processed by `babel-loader`\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {test: /\\.js$/, loaders: [ \"babel-loader\", \"eslint-loader\" ], exclude: /node_modules/},\n    ]\n  }\n  // ...\n}\n```\n\nTo be safe, you can use `preLoaders` section to check source files, not modified\nby other loaders (like `babel-loader`)\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    preLoaders: [\n      {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ]\n  }\n  // ...\n}\n```\n\n[webpack@2.1.0-beta.23 has breaking changes](https://github.com/webpack/webpack/releases). \n`preLoaders`  is removed  from the webpack^2.1.0-beta.23. so move it to `loaders` and using [enforce: \"pre\"]  instead.\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {enforce: \"pre\", test: /\\.js$/,  loader: \"eslint-loader\", exclude: /node_modules/}\n      // ... other loader\n    ]\n  }\n  // ...\n}\n```\n\n### Options\n\nYou can pass [eslint options](http://eslint.org/docs/developer-guide/nodejs-api#cliengine) directly by\n\n- Adding a query string to the loader for this loader usage only\n\n```js\n{\n  module: {\n    preLoaders: [\n      {\n        test: /\\.js$/,\n        loader: \"eslint-loader?{rules:{semi:0}}\",\n        exclude: /node_modules/,\n      },\n    ],\n  },\n}\n```\n\n- Adding an `eslint` entry in your webpack config for global options:\n\n```js\nmodule.exports = {\n  eslint: {\n    configFile: 'path/.eslintrc'\n  }\n}\n```\n\n**Note that you can use both methods in order to benefit from global & specific options**\n\n#### `fix` (default: false)\n\nThis option will enable\n[ESLint autofix feature](http://eslint.org/docs/user-guide/command-line-interface#fix).\n\n**Be careful, this option might cause webpack to enter an infinite build loop if\nsome issues cannot be fixed properly.**\n\n#### `cache` (default: false)\n\nThis option will enable caching of the linting results into a file.\nThis is particularly useful in reducing linting time when doing a full build.\n\nThe cache file is written to the `./node_modules/.cache` directory, thanks to the usage\nof the [find-cache-dir](https://www.npmjs.com/package/find-cache-dir) module.\n\n#### `formatter` (default: eslint stylish formatter)\n\nLoader accepts a function that will have one argument: an array of eslint messages (object).\nThe function must return the output as a string.\nYou can use official eslint formatters.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  }\n  eslint: {\n    // several examples !\n\n    // default value\n    formatter: require(\"eslint/lib/formatters/stylish\"),\n\n    // community formatter\n    formatter: require(\"eslint-friendly-formatter\"),\n\n    // custom formatter\n    formatter: function(results) {\n      // `results` format is available here\n      // http://eslint.org/docs/developer-guide/nodejs-api.html#executeonfiles()\n\n      // you should return a string\n      // DO NOT USE console.*() directly !\n      return \"OUTPUT\"\n    }\n  }\n}\n```\n\n#### Errors and Warning\n\n**By default the loader will auto adjust error reporting depending\non eslint errors/warnings counts.**\nYou can still force this behavior by using `emitError` **or** `emitWarning` options:\n\n##### `emitError` (default: `false`)\n\nLoader will always return errors if this option is set to `true`.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  },\n  eslint: {\n    emitError: true\n  }\n}\n```\n\n##### `emitWarning` (default: `false`)\n\nLoader will always return warnings if option is set to `true`.\n\n#### `quiet` (default: `false`)\n\nLoader will process and report errors only and ignore warnings if this option is set to true\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  },\n  eslint: {\n    quiet: true\n  }\n}\n```\n\n##### `failOnWarning` (default: `false`)\n\nLoader will cause the module build to fail if there are any eslint warnings.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  },\n  eslint: {\n    failOnWarning: true\n  }\n}\n```\n\n##### `failOnError` (default: `false`)\n\nLoader will cause the module build to fail if there are any eslint errors.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  },\n  eslint: {\n    failOnError: true\n  }\n}\n```\n\n##### `outputReport` (default: `false`)\nWrite the output of the errors to a file, for example a checkstyle xml file for use for reporting on Jenkins CI\n\nThe `filePath` is relative to the webpack config: output.path\nYou can pass in a different formatter for the output file, if none is passed in the default/configured formatter will be used\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  },\n  eslint: {\n    outputReport: {\n      filePath: 'checkstyle.xml',\n      formatter: require('eslint/lib/formatters/checkstyle')\n    }\n  }\n}\n```\n\n\n## Gotchas\n\n### NoErrorsPlugin\n\n`NoErrorsPlugin` prevents Webpack from outputting anything into a bundle. So even ESLint warnings\nwill fail the build. No matter what error settings are used for `eslint-loader`.\n\nSo if you want to see ESLint warnings in console during development using `WebpackDevServer`\nremove `NoErrorsPlugin` from webpack config.\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/MoOx/eslint-loader.git"
  },
  "scripts": {
    "lint": "eslint .",
    "release": "npmpub",
    "tape": "tape test/*.js",
    "test": "npm run lint && npm run tape"
  },
  "version": "1.6.0"
}
