{
  "_args": [
    [
      {
        "raw": "aria-query@^0.3.0",
        "scope": null,
        "escapedName": "aria-query",
        "name": "aria-query",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "/home/ryu/Projects/sket.io/web/node_modules/eslint-plugin-jsx-a11y"
    ]
  ],
  "_from": "aria-query@>=0.3.0 <0.4.0",
  "_id": "aria-query@0.3.0",
  "_inCache": true,
  "_location": "/aria-query",
  "_nodeVersion": "4.7.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/aria-query-0.3.0.tgz_1485899459736_0.1286766673438251"
  },
  "_npmUser": {
    "name": "jessebeach",
    "email": "splendidnoise@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "aria-query@^0.3.0",
    "scope": null,
    "escapedName": "aria-query",
    "name": "aria-query",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eslint-plugin-jsx-a11y"
  ],
  "_resolved": "https://registry.npmjs.org/aria-query/-/aria-query-0.3.0.tgz",
  "_shasum": "cb8a9984e2862711c83c80ade5b8f5ca0de2b467",
  "_shrinkwrap": null,
  "_spec": "aria-query@^0.3.0",
  "_where": "/home/ryu/Projects/sket.io/web/node_modules/eslint-plugin-jsx-a11y",
  "author": {
    "name": "Jesse Beach",
    "email": "splendidnoise@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/A11yance/aria-query/issues"
  },
  "contributors": [],
  "dependencies": {
    "ast-types-flow": "0.0.7"
  },
  "description": "Programmatic access to the ARIA specification",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.21.0",
    "babel-eslint": "^7.1.1",
    "babel-jest": "^18.0.0",
    "babel-plugin-transform-flow-strip-types": "^6.21.0",
    "babel-plugin-transform-object-rest-spread": "^6.20.2",
    "babel-polyfill": "^6.20.0",
    "babel-preset-es2015": "^6.18.0",
    "coveralls": "^2.11.15",
    "eslint": "^3.13.1",
    "eslint-plugin-flowtype": "^2.30.0",
    "eslint-plugin-import": "^2.2.0",
    "expect": "^1.20.2",
    "flow-bin": "^0.38.0",
    "jest": "^18.1.0",
    "minimist": "^1.2.0",
    "rimraf": "^2.5.4"
  },
  "directories": {},
  "dist": {
    "shasum": "cb8a9984e2862711c83c80ade5b8f5ca0de2b467",
    "tarball": "https://registry.npmjs.org/aria-query/-/aria-query-0.3.0.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "4cc9e5d9cced1e57395381789ad079aa757ab06e",
  "homepage": "https://github.com/A11yance/aria-query#readme",
  "jest": {
    "coverageReporters": [
      "lcov"
    ],
    "coverageDirectory": "reports",
    "testPathDirs": [
      "<rootDir>/__tests__"
    ]
  },
  "keywords": [
    "accessibility",
    "ARIA"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jessebeach",
      "email": "splendidnoise@gmail.com"
    },
    {
      "name": "marcysutton",
      "email": "marcy.sutton@deque.com"
    },
    {
      "name": "sundress",
      "email": "aliceboxhall@gmail.com"
    }
  ],
  "name": "aria-query",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/A11yance/aria-query.svg?branch=master)](https://travis-ci.org/A11yance/aria-query)\n\n**NOTICE: The API for ARIA Query is very much under development until a major version release. Please be aware that data structures might change in minor version releases before 1.0.0 is released.**\n\n# ARIA Query\n\nProgrammatic access to the [WAI-ARIA 1.1 Roles Model](https://www.w3.org/TR/wai-aria-1.1/#roles).\n\n## Utilities\n\n### Roles\n\n```\nimport { roles } from 'aria-query';\n```\n\nA [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) of\nrole names to the role definition. For example:\n\n```\nlet alertRole = roles.get('alert');\n/**\n * Value of alertRole\n * {\n *   \"requiredProps\": [],\n *   \"props\": [\n *     \"aria-expanded\",\n *     \"aria-atomic\",\n *     \"aria-busy\",\n *     \"aria-controls\",\n *     \"aria-describedby\",\n *     \"aria-disabled\",\n *     \"aria-dropeffect\",\n *     \"aria-flowto\",\n *     \"aria-grabbed\",\n *     \"aria-haspopup\",\n *     \"aria-hidden\",\n *     \"aria-invalid\",\n *     \"aria-label\",\n *     \"aria-labelledby\",\n *     \"aria-live\",\n *     \"aria-owns\",\n *     \"aria-relevant\"\n *   ],\n *   \"abstract\": false,\n *   \"interactive\": false,\n *   \"childrenPresentational\": false,\n *   \"baseConcepts\": [],\n *   \"relatedConcepts\": [{\n *     \"module\": \"XForms\",\n *     \"concept\": {\n *       \"name\": \"alert\"\n *     }\n *   }]\n * }\n```\n\n### Elements to Roles\n\n```\nimport { elementRoles } from 'aria-query';\n```\n\nHTML Elements with inherent roles are mapped to those roles. Some elements, such\nas `th`, are only mapped to a role when they express specific attributes. In the\ncase of `th`, the element must have an attribute `scope=\"col\"` to be mapped to\nthe `columnheader` role.\n\n```\nMap {\n  '{\"name\":\"article\"}' => Set { 'article' },\n  '{\"name\":\"button\"}' => Set { 'button' },\n  '{\"name\":\"td\"}' => Set { 'cell', 'gridcell' },\n  '{\"name\":\"input\",\"attributes\":[{\"name\":\"type\",\"value\":\"checkbox\"}]}' => Set { 'checkbox' },\n  '{\"name\":\"th\",\"attributes\":[{\"name\":\"scope\",\"value\":\"col\"}]}' => Set { 'columnheader' },\n  '{\"name\":\"select\"}' => Set { 'combobox', 'listbox' },\n  '{\"name\":\"menuitem\"}' => Set { 'command', 'menuitem' },\n  '{\"name\":\"dd\"}' => Set { 'definition' },\n  '{\"name\":\"dfn\"}' => Set { 'definition' },\n  '{\"name\":\"figure\"}' => Set { 'figure' },\n  '{\"name\":\"form\"}' => Set { 'form' },\n  '{\"name\":\"table\"}' => Set { 'grid', 'table' },\n  '{\"name\":\"fieldset\"}' => Set { 'group' },\n  '{\"name\":\"h1\"}' => Set { 'heading' },\n  '{\"name\":\"h2\"}' => Set { 'heading' },\n  '{\"name\":\"h3\"}' => Set { 'heading' },\n  '{\"name\":\"h4\"}' => Set { 'heading' },\n  '{\"name\":\"h5\"}' => Set { 'heading' },\n  '{\"name\":\"h6\"}' => Set { 'heading' },\n  '{\"name\":\"img\"}' => Set { 'img' },\n  '{\"name\":\"a\"}' => Set { 'link' },\n  '{\"name\":\"link\"}' => Set { 'link' },\n  '{\"name\":\"ol\"}' => Set { 'list' },\n  '{\"name\":\"ul\"}' => Set { 'list' },\n  '{\"name\":\"li\"}' => Set { 'listitem' },\n  '{\"name\":\"nav\"}' => Set { 'navigation' },\n  '{\"name\":\"option\"}' => Set { 'option' },\n  '{\"name\":\"input\",\"attributes\":[{\"name\":\"type\",\"value\":\"radio\"}]}' => Set { 'radio' },\n  '{\"name\":\"frame\"}' => Set { 'region' },\n  '{\"name\":\"rel\"}' => Set { 'roletype' },\n  '{\"name\":\"tr\"}' => Set { 'row' },\n  '{\"name\":\"tbody\"}' => Set { 'rowgroup' },\n  '{\"name\":\"tfoot\"}' => Set { 'rowgroup' },\n  '{\"name\":\"thead\"}' => Set { 'rowgroup' },\n  '{\"name\":\"th\",\"attributes\":[{\"name\":\"scope\",\"value\":\"row\"}]}' => Set { 'rowheader' },\n  '{\"name\":\"input\",\"attributes\":[{\"name\":\"type\",\"value\":\"search\"}]}' => Set { 'searchbox' },\n  '{\"name\":\"hr\"}' => Set { 'separator' },\n  '{\"name\":\"dt\"}' => Set { 'term' },\n  '{\"name\":\"textarea\"}' => Set { 'textbox' },\n  '{\"name\":\"input\",\"attributes\":[{\"name\":\"type\",\"value\":\"text\"}]}' => Set { 'textbox' }\n}\n```\n\nThe map of elements to roles is keyed by stringified HTML concept. An HTML concept\ncorresponds to the `baseConcepts` and `relatedConcepts` of an ARIA role. Concepts exist\nin the context of a `module`: HTML, XForms, Dublin Core, for example.  The concept representation\nis an object with a name property (the element name) and an optional attributes\narray. Use `JSON.parse` on the map key to rehydrate the HTML concept for inspection.\n\nThe roles are provided in a [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).\n\n### Role to element\n\n```\nimport { roleElements } from 'aria-query';\n```\n\nARIA roles are mapped to the HTML Elements with the same inherent role. Some roles,\nsuch as `columnheader` are only mapped to an HMTL element that expresses specific attributes.\nIn the case of `th`, the element must have an attribute `scope=\"col\"` to be mapped to\nthe `columnheader` role.\n\n```\nMap {\n  'article' => Set { '{\"name\":\"article\"}' },\n  'button' => Set { '{\"name\":\"button\"}' },\n  'cell' => Set { '{\"name\":\"td\"}' },\n  'checkbox' => Set { '{\"name\":\"input\",\"attributes\":[{\"name\":\"type\",\"value\":\"checkbox\"}]}' },\n  'columnheader' => Set { '{\"name\":\"th\",\"attributes\":[{\"name\":\"scope\",\"value\":\"col\"}]}' },\n  'combobox' => Set { '{\"name\":\"select\"}' },\n  'command' => Set { '{\"name\":\"menuitem\"}' },\n  'definition' => Set { '{\"name\":\"dd\"}', '{\"name\":\"dfn\"}' },\n  'figure' => Set { '{\"name\":\"figure\"}' },\n  'form' => Set { '{\"name\":\"form\"}' },\n  'grid' => Set { '{\"name\":\"table\"}' },\n  'gridcell' => Set { '{\"name\":\"td\"}' },\n  'group' => Set { '{\"name\":\"fieldset\"}' },\n  'heading' => Set { '{\"name\":\"h1\"}', '{\"name\":\"h2\"}', '{\"name\":\"h3\"}', '{\"name\":\"h4\"}',  '{\"name\":\"h5\"}', '{\"name\":\"h6\"}' },\n  'img' => Set { '{\"name\":\"img\"}' },\n  'link' => Set { '{\"name\":\"a\"}', '{\"name\":\"link\"}' },\n  'list' => Set { '{\"name\":\"ol\"}', '{\"name\":\"ul\"}' },\n  'listbox' => Set { '{\"name\":\"select\"}' },\n  'listitem' => Set { '{\"name\":\"li\"}' },\n  'menuitem' => Set { '{\"name\":\"menuitem\"}' },\n  'navigation' => Set { '{\"name\":\"nav\"}' },\n  'option' => Set { '{\"name\":\"option\"}' },\n  'radio' => Set { '{\"name\":\"input\",\"attributes\":[{\"name\":\"type\",\"value\":\"radio\"}]}' },\n  'region' => Set { '{\"name\":\"frame\"}' },\n  'roletype' => Set { '{\"name\":\"rel\"}' },\n  'row' => Set { '{\"name\":\"tr\"}' },\n  'rowgroup' => Set { '{\"name\":\"tbody\"}', '{\"name\":\"tfoot\"}', '{\"name\":\"thead\"}' },\n  'rowheader' => Set { '{\"name\":\"th\",\"attributes\":[{\"name\":\"scope\",\"value\":\"row\"}]}' },\n  'searchbox' => Set { '{\"name\":\"input\",\"attributes\":[{\"name\":\"type\",\"value\":\"search\"}]}' },\n  'separator' => Set { '{\"name\":\"hr\"}' },\n  'table' => Set { '{\"name\":\"table\"}' },\n  'term' => Set { '{\"name\":\"dt\"}' },\n  'textbox' => Set { '{\"name\":\"textarea\"}', '{\"name\":\"input\",\"attributes\":[{\"name\":\"type\",\"value\":\"text\"}]}' }\n}\n```\n\nThe HTML concept values are provided in a [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).\n\nAn HTML concept corresponds to the `baseConcepts` and `relatedConcepts` of an ARIA role. Concepts exist\nin the context of a `module`: HTML, XForms, Dublin Core, for example.  \nThe HTML concept values are stringified. Use `JSON.parse` on the map key to rehydrate\nthe HTML concept for inspection. The concept representation is an object with a name\nproperty (the element name) and an optional attributes\narray.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/A11yance/aria-query.git"
  },
  "scripts": {
    "build": "rimraf lib && babel src --out-dir lib && cp -R src/etc/ lib/etc",
    "coveralls": "cat ./reports/lcov.info | coveralls",
    "flow": "flow; test $? -eq 0 -o $? -eq 2",
    "lint": "eslint  --config .eslintrc src __tests__",
    "lint:fix": "npm run lint -- --fix",
    "prepublish": "npm run lint && npm run flow && npm run test && npm run build",
    "pretest": "npm run lint:fix && npm run flow",
    "test": "jest --coverage"
  },
  "version": "0.3.0"
}
